{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752829603637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752829630228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,29 +207,29 @@\n \n Run the test suite:\n \n ```bash\n-npm test\n+yarn test\n ```\n \n Run tests with coverage:\n \n ```bash\n-npm run test:coverage\n+yarn test:coverage\n ```\n \n ## Development\n \n Build the library:\n \n ```bash\n-npm run build\n+yarn build\n ```\n \n Run linting:\n \n ```bash\n-npm run lint\n+yarn lint\n ```\n \n ## License\n \n"
                },
                {
                    "date": 1752834411131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,11 @@\n # @zestic/oauth-core\n \n+[![CI](https://github.com/zestic/oauth-core/workflows/CI/badge.svg)](https://github.com/zestic/oauth-core/actions/workflows/ci.yml)\n+[![codecov](https://codecov.io/gh/zestic/oauth-core/branch/main/graph/badge.svg)](https://codecov.io/gh/zestic/oauth-core)\n+[![npm version](https://badge.fury.io/js/%40zestic%2Foauth-core.svg)](https://badge.fury.io/js/%40zestic%2Foauth-core)\n+[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n+\n Framework-agnostic OAuth authentication library with support for multiple OAuth flows including authorization code flow, magic link authentication, and custom flows.\n \n ## Features\n \n"
                },
                {
                    "date": 1752834428468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,7 +235,31 @@\n ```bash\n yarn lint\n ```\n \n+Run the full CI pipeline locally:\n+\n+```bash\n+yarn ci\n+```\n+\n+### Contributing\n+\n+We welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.\n+\n+### Security\n+\n+For security vulnerabilities, please see [SECURITY.md](SECURITY.md) for reporting instructions.\n+\n+## CI/CD\n+\n+This project uses GitHub Actions for continuous integration:\n+\n+- **Linting**: ESLint checks on every push and PR\n+- **Testing**: Jest tests across Node.js 16, 18, and 20\n+- **Build**: TypeScript compilation verification\n+- **Security**: CodeQL analysis and dependency review\n+- **Release**: Automated npm publishing on version tags\n+\n ## License\n \n MIT\n"
                }
            ],
            "date": 1752829603637,
            "name": "Commit-0",
            "content": "# @zestic/oauth-core\n\nFramework-agnostic OAuth authentication library with support for multiple OAuth flows including authorization code flow, magic link authentication, and custom flows.\n\n## Features\n\n- **Multiple OAuth Flows**: Authorization code flow, magic link authentication, and extensible custom flows\n- **PKCE Support**: Built-in PKCE (Proof Key for Code Exchange) implementation for enhanced security\n- **Framework Agnostic**: Works with any JavaScript/TypeScript framework through adapter pattern\n- **Type Safe**: Full TypeScript support with comprehensive type definitions\n- **Extensible**: Plugin-based architecture for custom OAuth flows\n- **Well Tested**: Comprehensive test coverage with Jest\n- **Storage Agnostic**: Pluggable storage adapters for different environments\n\n## Installation\n\n```bash\nyarn add @zestic/oauth-core\n# or\nnpm install @zestic/oauth-core\n```\n\n## Quick Start\n\n```typescript\nimport { OAuthCore, createOAuthCore } from '@zestic/oauth-core';\n\n// Configure OAuth\nconst config = {\n  clientId: 'your-client-id',\n  endpoints: {\n    authorization: 'https://auth.example.com/oauth/authorize',\n    token: 'https://auth.example.com/oauth/token',\n    revocation: 'https://auth.example.com/oauth/revoke',\n  },\n  redirectUri: 'https://yourapp.com/auth/callback',\n  scopes: ['read', 'write'],\n};\n\n// Create adapters (implement these for your environment)\nconst adapters = {\n  storage: new YourStorageAdapter(),\n  http: new YourHttpAdapter(),\n  pkce: new YourPKCEAdapter(),\n};\n\n// Initialize OAuth core\nconst oauth = createOAuthCore(config, adapters);\n\n// Handle OAuth callback\nconst result = await oauth.handleCallback(window.location.search);\n\nif (result.success) {\n  console.log('Access token:', result.accessToken);\n  console.log('Refresh token:', result.refreshToken);\n} else {\n  console.error('OAuth failed:', result.error);\n}\n```\n\n## Supported OAuth Flows\n\n### Authorization Code Flow\n\nStandard OAuth 2.0 authorization code flow with PKCE support.\n\n```typescript\n// Callback URL: https://yourapp.com/callback?code=auth_code&state=xyz\nconst params = new URLSearchParams(window.location.search);\nconst result = await oauth.handleCallback(params);\n```\n\n### Magic Link Flow\n\nCustom magic link authentication flow.\n\n```typescript\n// Callback URL: https://yourapp.com/callback?token=magic_token&flow=login\nconst params = new URLSearchParams(window.location.search);\nconst result = await oauth.handleCallback(params);\n```\n\n### Custom Flows\n\nExtend the library with custom OAuth flows:\n\n```typescript\nimport { BaseFlowHandler } from '@zestic/oauth-core';\n\nclass CustomFlowHandler extends BaseFlowHandler {\n  readonly name = 'custom_flow';\n  readonly priority = 10;\n\n  canHandle(params: URLSearchParams): boolean {\n    return params.has('custom_token');\n  }\n\n  async handle(params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig): Promise<OAuthResult> {\n    // Custom flow implementation\n    const token = params.get('custom_token');\n    // ... handle token exchange\n    return { success: true, accessToken: 'token' };\n  }\n}\n\n// Register custom flow\noauth.registerFlow(new CustomFlowHandler());\n```\n\n## Configuration\n\n### Flow Configuration\n\nControl which flows are enabled:\n\n```typescript\nconst oauth = createOAuthCore(config, adapters, {\n  enabledFlows: ['authorization_code', 'magic_link'], // Only enable specific flows\n  disabledFlows: ['magic_link'], // Disable specific flows\n  customFlows: [new CustomFlowHandler()], // Add custom flows\n});\n```\n\n### Adapter Implementation\n\nImplement adapters for your environment:\n\n```typescript\nimport { StorageAdapter, HttpAdapter, PKCEAdapter } from '@zestic/oauth-core';\n\n// Storage adapter example (using localStorage)\nclass BrowserStorageAdapter implements StorageAdapter {\n  async setItem(key: string, value: string): Promise<void> {\n    localStorage.setItem(key, value);\n  }\n\n  async getItem(key: string): Promise<string | null> {\n    return localStorage.getItem(key);\n  }\n\n  async removeItem(key: string): Promise<void> {\n    localStorage.removeItem(key);\n  }\n\n  async removeItems(keys: string[]): Promise<void> {\n    keys.forEach(key => localStorage.removeItem(key));\n  }\n}\n\n// HTTP adapter example (using fetch)\nclass FetchHttpAdapter implements HttpAdapter {\n  async post(url: string, data: Record<string, unknown>, headers?: Record<string, string>): Promise<HttpResponse> {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        ...headers,\n      },\n      body: new URLSearchParams(data as Record<string, string>),\n    });\n\n    return {\n      status: response.status,\n      data: await response.json(),\n      headers: Object.fromEntries(response.headers.entries()),\n    };\n  }\n\n  async get(url: string, headers?: Record<string, string>): Promise<HttpResponse> {\n    const response = await fetch(url, { headers });\n    return {\n      status: response.status,\n      data: await response.json(),\n      headers: Object.fromEntries(response.headers.entries()),\n    };\n  }\n}\n```\n\n## API Reference\n\n### OAuthCore\n\nMain class for handling OAuth operations.\n\n#### Methods\n\n- `handleCallback(params: URLSearchParams | string, explicitFlow?: string): Promise<OAuthResult>`\n- `generatePKCEChallenge(): Promise<PKCEChallenge>`\n- `generateState(): Promise<string>`\n- `getAccessToken(): Promise<string | null>`\n- `getRefreshToken(): Promise<string | null>`\n- `isTokenExpired(): Promise<boolean>`\n- `refreshAccessToken(): Promise<OAuthResult>`\n- `logout(): Promise<void>`\n- `registerFlow(handler: FlowHandler): void`\n- `unregisterFlow(name: string): void`\n\n### Flow Handlers\n\nBuilt-in flow handlers:\n\n- `AuthorizationCodeFlowHandler`: Standard OAuth 2.0 authorization code flow\n- `MagicLinkFlowHandler`: Magic link authentication flow\n\n## Testing\n\nRun the test suite:\n\n```bash\nnpm test\n```\n\nRun tests with coverage:\n\n```bash\nnpm run test:coverage\n```\n\n## Development\n\nBuild the library:\n\n```bash\nnpm run build\n```\n\nRun linting:\n\n```bash\nnpm run lint\n```\n\n## License\n\nMIT\n"
        }
    ]
}