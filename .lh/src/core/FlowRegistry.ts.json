{
    "sourceFile": "src/core/FlowRegistry.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752827719923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752827759363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   register(handler: FlowHandler): void {\n     if (!this.options.allowDuplicates && this.handlers.has(handler.name)) {\n       throw ErrorHandler.createError(\n         `Flow handler '${handler.name}' is already registered`,\n-        'INVALID_CONFIGURATION'\n+        OAUTH_ERROR_CODES.INVALID_CONFIGURATION\n       );\n     }\n \n     this.handlers.set(handler.name, handler);\n"
                },
                {
                    "date": 1752827829424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     \n     if (missing.length > 0) {\n       throw ErrorHandler.createError(\n         `Missing required flow handlers: ${missing.join(', ')}`,\n-        'INVALID_CONFIGURATION'\n+        OAUTH_ERROR_CODES.INVALID_CONFIGURATION\n       );\n     }\n   }\n \n"
                }
            ],
            "date": 1752827719923,
            "name": "Commit-0",
            "content": "/**\n * Registry for managing OAuth flow handlers\n */\n\nimport { FlowHandler, FlowDetectionResult, FlowRegistryOptions } from '../types/FlowTypes';\nimport { OAuthConfig, OAUTH_ERROR_CODES } from '../types/OAuthTypes';\nimport { ErrorHandler } from '../utils/ErrorHandler';\n\nexport class FlowRegistry {\n  private handlers = new Map<string, FlowHandler>();\n  private options: FlowRegistryOptions;\n\n  constructor(options: FlowRegistryOptions = {}) {\n    this.options = {\n      allowDuplicates: false,\n      defaultPriority: 50,\n      ...options,\n    };\n  }\n\n  /**\n   * Register a flow handler\n   */\n  register(handler: FlowHandler): void {\n    if (!this.options.allowDuplicates && this.handlers.has(handler.name)) {\n      throw ErrorHandler.createError(\n        `Flow handler '${handler.name}' is already registered`,\n        'INVALID_CONFIGURATION'\n      );\n    }\n\n    this.handlers.set(handler.name, handler);\n  }\n\n  /**\n   * Unregister a flow handler\n   */\n  unregister(name: string): boolean {\n    return this.handlers.delete(name);\n  }\n\n  /**\n   * Get a specific flow handler by name\n   */\n  getHandler(name: string): FlowHandler | undefined {\n    return this.handlers.get(name);\n  }\n\n  /**\n   * Get all registered handlers\n   */\n  getAllHandlers(): FlowHandler[] {\n    return Array.from(this.handlers.values());\n  }\n\n  /**\n   * Get handlers sorted by priority\n   */\n  getHandlersByPriority(): FlowHandler[] {\n    return Array.from(this.handlers.values())\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Auto-detect which flow to use based on parameters\n   */\n  detectFlow(params: URLSearchParams, config: OAuthConfig): FlowHandler | undefined {\n    const sortedHandlers = this.getHandlersByPriority();\n    \n    for (const handler of sortedHandlers) {\n      if (handler.canHandle(params, config)) {\n        return handler;\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Detect flow with confidence scoring\n   */\n  detectFlowWithConfidence(params: URLSearchParams, config: OAuthConfig): FlowDetectionResult | undefined {\n    const sortedHandlers = this.getHandlersByPriority();\n    \n    for (const handler of sortedHandlers) {\n      if (handler.canHandle(params, config)) {\n        // Simple confidence calculation based on priority\n        // Lower priority number = higher confidence\n        const confidence = Math.max(0, 100 - handler.priority);\n        \n        return {\n          handler,\n          confidence,\n          reason: `Handler '${handler.name}' can process the provided parameters`,\n        };\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Get all handlers that can handle the given parameters\n   */\n  getCompatibleHandlers(params: URLSearchParams, config: OAuthConfig): FlowHandler[] {\n    return this.getAllHandlers().filter(handler => handler.canHandle(params, config));\n  }\n\n  /**\n   * Check if a specific flow is registered\n   */\n  hasHandler(name: string): boolean {\n    return this.handlers.has(name);\n  }\n\n  /**\n   * Get the number of registered handlers\n   */\n  getHandlerCount(): number {\n    return this.handlers.size;\n  }\n\n  /**\n   * Clear all registered handlers\n   */\n  clear(): void {\n    this.handlers.clear();\n  }\n\n  /**\n   * Get handler names\n   */\n  getHandlerNames(): string[] {\n    return Array.from(this.handlers.keys());\n  }\n\n  /**\n   * Validate that all required handlers are registered\n   */\n  validateRequiredHandlers(requiredHandlers: string[]): void {\n    const missing = requiredHandlers.filter(name => !this.hasHandler(name));\n    \n    if (missing.length > 0) {\n      throw ErrorHandler.createError(\n        `Missing required flow handlers: ${missing.join(', ')}`,\n        'INVALID_CONFIGURATION'\n      );\n    }\n  }\n\n  /**\n   * Register multiple handlers at once\n   */\n  registerMultiple(handlers: FlowHandler[]): void {\n    for (const handler of handlers) {\n      this.register(handler);\n    }\n  }\n\n  /**\n   * Create a copy of the registry\n   */\n  clone(): FlowRegistry {\n    const newRegistry = new FlowRegistry(this.options);\n    \n    for (const handler of this.getAllHandlers()) {\n      newRegistry.register(handler);\n    }\n    \n    return newRegistry;\n  }\n}\n"
        }
    ]
}