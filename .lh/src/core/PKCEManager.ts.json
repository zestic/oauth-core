{
    "sourceFile": "src/core/PKCEManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752829804141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752829845929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n       return challenge;\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to generate PKCE challenge',\n-        'MISSING_PKCE',\n+        OAUTH_ERROR_CODES.MISSING_PKCE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752829886917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n       return state;\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to generate OAuth state',\n-        'MISSING_PKCE',\n+        OAUTH_ERROR_CODES.MISSING_PKCE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752829924361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n       return await this.storageAdapter.getItem(PKCEManager.STORAGE_KEYS.CODE_VERIFIER);\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to retrieve code verifier',\n-        'MISSING_PKCE',\n+        OAUTH_ERROR_CODES.MISSING_PKCE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830010497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n       return await this.storageAdapter.getItem(PKCEManager.STORAGE_KEYS.CODE_CHALLENGE);\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to retrieve code challenge',\n-        'MISSING_PKCE',\n+        OAUTH_ERROR_CODES.MISSING_PKCE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830056229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n       return await this.storageAdapter.getItem(PKCEManager.STORAGE_KEYS.STATE);\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to retrieve stored state',\n-        'INVALID_STATE',\n+        OAUTH_ERROR_CODES.INVALID_STATE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830072606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n       return storedState === receivedState;\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to validate state parameter',\n-        'INVALID_STATE',\n+        OAUTH_ERROR_CODES.INVALID_STATE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830108299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n       await this.storageAdapter.removeItems(keys);\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to clear PKCE data',\n-        'NETWORK_ERROR',\n+        OAUTH_ERROR_CODES.NETWORK_ERROR,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830132364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n       };\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to retrieve PKCE data',\n-        'MISSING_PKCE',\n+        OAUTH_ERROR_CODES.MISSING_PKCE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                }
            ],
            "date": 1752829804141,
            "name": "Commit-0",
            "content": "/**\n * PKCE (Proof Key for Code Exchange) management\n */\n\nimport { PKCEAdapter, PKCEChallenge, StorageAdapter, OAUTH_ERROR_CODES } from '../types/OAuthTypes';\nimport { ErrorHandler } from '../utils/ErrorHandler';\n\nexport class PKCEManager {\n  private static readonly STORAGE_KEYS = {\n    CODE_VERIFIER: 'pkce_code_verifier',\n    CODE_CHALLENGE: 'pkce_code_challenge',\n    CODE_CHALLENGE_METHOD: 'pkce_code_challenge_method',\n    STATE: 'oauth_state',\n  };\n\n  constructor(\n    private pkceAdapter: PKCEAdapter,\n    private storageAdapter: StorageAdapter\n  ) {}\n\n  /**\n   * Generate PKCE challenge and store code verifier\n   */\n  async generateChallenge(): Promise<PKCEChallenge> {\n    try {\n      const challenge = await this.pkceAdapter.generateCodeChallenge();\n      \n      // Store the code verifier for later use\n      await this.storageAdapter.setItem(\n        PKCEManager.STORAGE_KEYS.CODE_VERIFIER,\n        challenge.codeVerifier\n      );\n      \n      await this.storageAdapter.setItem(\n        PKCEManager.STORAGE_KEYS.CODE_CHALLENGE,\n        challenge.codeChallenge\n      );\n      \n      await this.storageAdapter.setItem(\n        PKCEManager.STORAGE_KEYS.CODE_CHALLENGE_METHOD,\n        challenge.codeChallengeMethod\n      );\n\n      return challenge;\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to generate PKCE challenge',\n        'MISSING_PKCE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Generate and store OAuth state parameter\n   */\n  async generateState(): Promise<string> {\n    try {\n      const state = await this.pkceAdapter.generateState();\n      \n      await this.storageAdapter.setItem(\n        PKCEManager.STORAGE_KEYS.STATE,\n        state\n      );\n      \n      return state;\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to generate OAuth state',\n        'MISSING_PKCE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Retrieve stored code verifier\n   */\n  async getCodeVerifier(): Promise<string | null> {\n    try {\n      return await this.storageAdapter.getItem(PKCEManager.STORAGE_KEYS.CODE_VERIFIER);\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to retrieve code verifier',\n        'MISSING_PKCE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Retrieve stored code challenge\n   */\n  async getCodeChallenge(): Promise<string | null> {\n    try {\n      return await this.storageAdapter.getItem(PKCEManager.STORAGE_KEYS.CODE_CHALLENGE);\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to retrieve code challenge',\n        'MISSING_PKCE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Retrieve stored state\n   */\n  async getStoredState(): Promise<string | null> {\n    try {\n      return await this.storageAdapter.getItem(PKCEManager.STORAGE_KEYS.STATE);\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to retrieve stored state',\n        'INVALID_STATE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Validate state parameter against stored value\n   */\n  async validateState(receivedState: string): Promise<boolean> {\n    try {\n      const storedState = await this.getStoredState();\n      \n      if (!storedState) {\n        return false;\n      }\n      \n      return storedState === receivedState;\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to validate state parameter',\n        'INVALID_STATE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Clear all stored PKCE data\n   */\n  async clearPKCEData(): Promise<void> {\n    try {\n      const keys = Object.values(PKCEManager.STORAGE_KEYS);\n      await this.storageAdapter.removeItems(keys);\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to clear PKCE data',\n        'NETWORK_ERROR',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Check if PKCE data exists in storage\n   */\n  async hasPKCEData(): Promise<boolean> {\n    try {\n      const codeVerifier = await this.getCodeVerifier();\n      return codeVerifier !== null;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get all stored PKCE data\n   */\n  async getAllPKCEData(): Promise<{\n    codeVerifier: string | null;\n    codeChallenge: string | null;\n    codeChallengeMethod: string | null;\n    state: string | null;\n  }> {\n    try {\n      const [codeVerifier, codeChallenge, codeChallengeMethod, state] = await Promise.all([\n        this.getCodeVerifier(),\n        this.getCodeChallenge(),\n        this.storageAdapter.getItem(PKCEManager.STORAGE_KEYS.CODE_CHALLENGE_METHOD),\n        this.getStoredState(),\n      ]);\n\n      return {\n        codeVerifier,\n        codeChallenge,\n        codeChallengeMethod,\n        state,\n      };\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to retrieve PKCE data',\n        'MISSING_PKCE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n}\n"
        }
    ]
}