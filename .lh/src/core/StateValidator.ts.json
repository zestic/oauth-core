{
    "sourceFile": "src/core/StateValidator.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752830154095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752830177852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n       ]);\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to store OAuth state',\n-        'INVALID_STATE',\n+        OAUTH_ERROR_CODES.INVALID_STATE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830195745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n       return await this.storageAdapter.getItem(StateValidator.STATE_STORAGE_KEY);\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to retrieve stored state',\n-        'INVALID_STATE',\n+        OAUTH_ERROR_CODES.INVALID_STATE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830213622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n       return isValid;\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to validate state parameter',\n-        'INVALID_STATE',\n+        OAUTH_ERROR_CODES.INVALID_STATE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830273694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n       ]);\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to clear OAuth state',\n-        'INVALID_STATE',\n+        OAUTH_ERROR_CODES.INVALID_STATE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                },
                {
                    "date": 1752830290951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n       );\n     } catch (error) {\n       throw ErrorHandler.createError(\n         'Failed to extend state expiry',\n-        'INVALID_STATE',\n+        OAUTH_ERROR_CODES.INVALID_STATE,\n         error instanceof Error ? error : new Error(String(error))\n       );\n     }\n   }\n"
                }
            ],
            "date": 1752830154095,
            "name": "Commit-0",
            "content": "/**\n * CSRF state validation for OAuth flows\n */\n\nimport { StorageAdapter, OAUTH_ERROR_CODES } from '../types/OAuthTypes';\nimport { ErrorHandler } from '../utils/ErrorHandler';\n\nexport class StateValidator {\n  private static readonly STATE_STORAGE_KEY = 'oauth_state';\n  private static readonly STATE_EXPIRY_KEY = 'oauth_state_expiry';\n  private static readonly DEFAULT_STATE_TTL = 10 * 60 * 1000; // 10 minutes\n\n  constructor(\n    private storageAdapter: StorageAdapter,\n    private stateTTL: number = StateValidator.DEFAULT_STATE_TTL\n  ) {}\n\n  /**\n   * Store state with expiry time\n   */\n  async storeState(state: string): Promise<void> {\n    try {\n      const expiryTime = Date.now() + this.stateTTL;\n      \n      await Promise.all([\n        this.storageAdapter.setItem(StateValidator.STATE_STORAGE_KEY, state),\n        this.storageAdapter.setItem(StateValidator.STATE_EXPIRY_KEY, expiryTime.toString()),\n      ]);\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to store OAuth state',\n        'INVALID_STATE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Retrieve stored state\n   */\n  async getStoredState(): Promise<string | null> {\n    try {\n      return await this.storageAdapter.getItem(StateValidator.STATE_STORAGE_KEY);\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to retrieve stored state',\n        'INVALID_STATE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Check if stored state is expired\n   */\n  async isStateExpired(): Promise<boolean> {\n    try {\n      const expiryTimeStr = await this.storageAdapter.getItem(StateValidator.STATE_EXPIRY_KEY);\n      \n      if (!expiryTimeStr) {\n        return true; // No expiry time means expired\n      }\n\n      const expiryTime = parseInt(expiryTimeStr, 10);\n      return Date.now() >= expiryTime;\n    } catch {\n      return true; // Error retrieving expiry means expired\n    }\n  }\n\n  /**\n   * Validate received state against stored state\n   */\n  async validateState(receivedState: string): Promise<boolean> {\n    try {\n      // Check if state is expired first\n      if (await this.isStateExpired()) {\n        await this.clearState(); // Clean up expired state\n        return false;\n      }\n\n      const storedState = await this.getStoredState();\n      \n      if (!storedState) {\n        return false;\n      }\n\n      const isValid = storedState === receivedState;\n      \n      // Clear state after validation (one-time use)\n      if (isValid) {\n        await this.clearState();\n      }\n\n      return isValid;\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to validate state parameter',\n        'INVALID_STATE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Validate state and throw error if invalid\n   */\n  async validateStateOrThrow(receivedState: string): Promise<void> {\n    const isValid = await this.validateState(receivedState);\n    \n    if (!isValid) {\n      const storedState = await this.getStoredState();\n      throw ErrorHandler.handleInvalidState(storedState ?? undefined, receivedState);\n    }\n  }\n\n  /**\n   * Clear stored state\n   */\n  async clearState(): Promise<void> {\n    try {\n      await this.storageAdapter.removeItems([\n        StateValidator.STATE_STORAGE_KEY,\n        StateValidator.STATE_EXPIRY_KEY,\n      ]);\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to clear OAuth state',\n        'INVALID_STATE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Check if state exists in storage\n   */\n  async hasStoredState(): Promise<boolean> {\n    try {\n      const state = await this.getStoredState();\n      return state !== null && !(await this.isStateExpired());\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get remaining TTL for stored state\n   */\n  async getStateRemainingTTL(): Promise<number> {\n    try {\n      const expiryTimeStr = await this.storageAdapter.getItem(StateValidator.STATE_EXPIRY_KEY);\n      \n      if (!expiryTimeStr) {\n        return 0;\n      }\n\n      const expiryTime = parseInt(expiryTimeStr, 10);\n      const remaining = expiryTime - Date.now();\n      \n      return Math.max(0, remaining);\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * Extend state expiry time\n   */\n  async extendStateExpiry(additionalTime?: number): Promise<void> {\n    try {\n      const extension = additionalTime ?? this.stateTTL;\n      const newExpiryTime = Date.now() + extension;\n      \n      await this.storageAdapter.setItem(\n        StateValidator.STATE_EXPIRY_KEY,\n        newExpiryTime.toString()\n      );\n    } catch (error) {\n      throw ErrorHandler.createError(\n        'Failed to extend state expiry',\n        'INVALID_STATE',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * Cleanup expired state (can be called periodically)\n   */\n  async cleanupExpiredState(): Promise<void> {\n    if (await this.isStateExpired()) {\n      await this.clearState();\n    }\n  }\n}\n"
        }
    ]
}