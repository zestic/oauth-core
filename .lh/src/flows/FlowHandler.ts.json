{
    "sourceFile": "src/flows/FlowHandler.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752830563135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752830577150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       const message = errorDescription || error || 'OAuth error occurred';\n       \n       throw ErrorHandler.createError(\n         message,\n-        error || 'INVALID_GRANT'\n+        error || OAUTH_ERROR_CODES.INVALID_GRANT\n       );\n     }\n   }\n \n"
                },
                {
                    "date": 1752831348340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       const message = errorDescription || error || 'OAuth error occurred';\n       \n       throw ErrorHandler.createError(\n         message,\n-        error || OAUTH_ERROR_CODES.INVALID_GRANT\n+        (error as any) || OAUTH_ERROR_CODES.INVALID_GRANT\n       );\n     }\n   }\n \n"
                },
                {
                    "date": 1752834566321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       const message = errorDescription || error || 'OAuth error occurred';\n       \n       throw ErrorHandler.createError(\n         message,\n-        (error as any) || OAUTH_ERROR_CODES.INVALID_GRANT\n+        (error as string) || OAUTH_ERROR_CODES.INVALID_GRANT\n       );\n     }\n   }\n \n"
                },
                {
                    "date": 1752834611407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       const message = errorDescription || error || 'OAuth error occurred';\n       \n       throw ErrorHandler.createError(\n         message,\n-        (error as string) || OAUTH_ERROR_CODES.INVALID_GRANT\n+        error && typeof error === 'string' ? error as import('../types/OAuthTypes').OAuthErrorCode : OAUTH_ERROR_CODES.INVALID_GRANT\n       );\n     }\n   }\n \n"
                }
            ],
            "date": 1752830563135,
            "name": "Commit-0",
            "content": "/**\n * Base flow handler interface and abstract implementation\n */\n\nimport { FlowHandler as IFlowHandler } from '../types/FlowTypes';\nimport { OAuthConfig, OAuthAdapters, OAuthResult, OAUTH_ERROR_CODES } from '../types/OAuthTypes';\nimport { ErrorHandler } from '../utils/ErrorHandler';\nimport { UrlParser } from '../utils/UrlParser';\n\n/**\n * Abstract base class for flow handlers\n */\nexport abstract class BaseFlowHandler implements IFlowHandler {\n  abstract readonly name: string;\n  abstract readonly priority: number;\n\n  abstract canHandle(params: URLSearchParams, config: OAuthConfig): boolean;\n  abstract handle(params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig): Promise<OAuthResult>;\n\n  /**\n   * Optional validation step - can be overridden by subclasses\n   */\n  async validate?(params: URLSearchParams, config: OAuthConfig): Promise<boolean>;\n\n  /**\n   * Check for OAuth errors in parameters\n   */\n  protected checkForOAuthError(params: URLSearchParams): void {\n    if (UrlParser.hasOAuthError(params)) {\n      const { error, errorDescription } = UrlParser.extractOAuthError(params);\n      const message = errorDescription || error || 'OAuth error occurred';\n      \n      throw ErrorHandler.createError(\n        message,\n        error || 'INVALID_GRANT'\n      );\n    }\n  }\n\n  /**\n   * Validate required parameters\n   */\n  protected validateRequiredParams(params: URLSearchParams, requiredParams: string[]): void {\n    const missing = requiredParams.filter(param => !params.has(param));\n    \n    if (missing.length > 0) {\n      throw ErrorHandler.handleMissingParameter(missing.join(', '));\n    }\n  }\n\n  /**\n   * Extract parameter safely with validation\n   */\n  protected getRequiredParam(params: URLSearchParams, key: string): string {\n    const value = params.get(key);\n    \n    if (!value) {\n      throw ErrorHandler.handleMissingParameter(key);\n    }\n    \n    return value;\n  }\n\n  /**\n   * Get optional parameter with default value\n   */\n  protected getOptionalParam(params: URLSearchParams, key: string, defaultValue?: string): string | undefined {\n    return params.get(key) ?? defaultValue;\n  }\n\n  /**\n   * Create success result\n   */\n  protected createSuccessResult(\n    accessToken: string,\n    refreshToken?: string,\n    expiresIn?: number\n  ): OAuthResult {\n    return {\n      success: true,\n      accessToken,\n      refreshToken,\n      expiresIn,\n    };\n  }\n\n  /**\n   * Create error result\n   */\n  protected createErrorResult(error: string, errorCode?: string): OAuthResult {\n    return {\n      success: false,\n      error,\n      errorCode,\n    };\n  }\n\n  /**\n   * Log flow execution\n   */\n  protected logFlowExecution(message: string, params?: URLSearchParams): void {\n    const sanitizedParams = params ? UrlParser.sanitizeForLogging(params) : {};\n    console.log(`[${this.name}] ${message}`, sanitizedParams);\n  }\n\n  /**\n   * Measure execution time\n   */\n  protected async measureExecutionTime<T>(\n    operation: () => Promise<T>,\n    operationName: string\n  ): Promise<T> {\n    const startTime = Date.now();\n    \n    try {\n      const result = await operation();\n      const duration = Date.now() - startTime;\n      console.log(`[${this.name}] ${operationName} completed in ${duration}ms`);\n      return result;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      console.error(`[${this.name}] ${operationName} failed after ${duration}ms:`, error);\n      throw error;\n    }\n  }\n}\n\n/**\n * Simple flow handler implementation for basic flows\n */\nexport class SimpleFlowHandler extends BaseFlowHandler {\n  constructor(\n    public readonly name: string,\n    public readonly priority: number,\n    private canHandleFunc: (params: URLSearchParams, config: OAuthConfig) => boolean,\n    private handleFunc: (params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig) => Promise<OAuthResult>,\n    private validateFunc?: (params: URLSearchParams, config: OAuthConfig) => Promise<boolean>\n  ) {\n    super();\n  }\n\n  canHandle(params: URLSearchParams, config: OAuthConfig): boolean {\n    return this.canHandleFunc(params, config);\n  }\n\n  async handle(params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig): Promise<OAuthResult> {\n    return this.handleFunc(params, adapters, config);\n  }\n\n  async validate(params: URLSearchParams, config: OAuthConfig): Promise<boolean> {\n    if (this.validateFunc) {\n      return this.validateFunc(params, config);\n    }\n    return true;\n  }\n}\n\n/**\n * Factory for creating simple flow handlers\n */\nexport class FlowHandlerFactory {\n  static create(\n    name: string,\n    priority: number,\n    canHandle: (params: URLSearchParams, config: OAuthConfig) => boolean,\n    handle: (params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig) => Promise<OAuthResult>,\n    validate?: (params: URLSearchParams, config: OAuthConfig) => Promise<boolean>\n  ): IFlowHandler {\n    return new SimpleFlowHandler(name, priority, canHandle, handle, validate);\n  }\n}\n"
        }
    ]
}