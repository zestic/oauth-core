{
    "sourceFile": "src/flows/MagicLinkFlowHandler.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752830671933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752830690195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,11 @@\n \n       // If state is present, validate it\n       const state = params.get('state');\n       if (state) {\n-        const stateValidator = new StateValidator(config.adapters?.storage || {} as any);\n-        const isValidState = await stateValidator.validateState(state);\n-        if (!isValidState) {\n-          return false;\n-        }\n+        // Note: In real usage, adapters would be passed from the handle method\n+        // For validation, we just check if state exists\n+        return true;\n       }\n \n       return true;\n     } catch {\n"
                },
                {
                    "date": 1752830729764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n         }\n \n         throw ErrorHandler.createError(\n           `Magic link flow failed: ${error instanceof Error ? error.message : String(error)}`,\n-          'TOKEN_EXCHANGE_FAILED',\n+          OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED,\n           error instanceof Error ? error : undefined\n         );\n       }\n     }, 'Magic link token exchange');\n"
                },
                {
                    "date": 1752830793011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,26 +176,38 @@\n \n /**\n  * Specialized handlers for different magic link flows\n  */\n-export class MagicLinkLoginFlowHandler extends MagicLinkFlowHandler {\n+export class MagicLinkLoginFlowHandler extends BaseFlowHandler {\n   readonly name = 'magic_link_login';\n+  readonly priority = FLOW_PRIORITIES.HIGH;\n \n   canHandle(params: URLSearchParams): boolean {\n-    const hasToken = super.canHandle(params);\n+    const hasToken = params.has('token') || params.has('magic_link_token');\n     const flow = params.get('flow');\n     return hasToken && flow === 'login';\n   }\n+\n+  async handle(params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig): Promise<OAuthResult> {\n+    const handler = new MagicLinkFlowHandler();\n+    return handler.handle(params, adapters, config);\n+  }\n }\n \n-export class MagicLinkRegistrationFlowHandler extends MagicLinkFlowHandler {\n+export class MagicLinkRegistrationFlowHandler extends BaseFlowHandler {\n   readonly name = 'magic_link_registration';\n+  readonly priority = FLOW_PRIORITIES.HIGH;\n \n   canHandle(params: URLSearchParams): boolean {\n-    const hasToken = super.canHandle(params);\n+    const hasToken = params.has('token') || params.has('magic_link_token');\n     const flow = params.get('flow');\n     return hasToken && flow === 'registration';\n   }\n+\n+  async handle(params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig): Promise<OAuthResult> {\n+    const handler = new MagicLinkFlowHandler();\n+    return handler.handle(params, adapters, config);\n+  }\n }\n \n /**\n  * Factory functions for specialized handlers\n"
                },
                {
                    "date": 1752831410450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n   /**\n    * Validate the magic link flow parameters\n    */\n-  async validate(params: URLSearchParams, config: OAuthConfig): Promise<boolean> {\n+  async validate(params: URLSearchParams, _config: OAuthConfig): Promise<boolean> {\n     try {\n       // Check for OAuth errors first\n       this.checkForOAuthError(params);\n \n"
                },
                {
                    "date": 1752834552885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n   /**\n    * Validate the magic link flow parameters\n    */\n-  async validate(params: URLSearchParams, _config: OAuthConfig): Promise<boolean> {\n+  async validate(params: URLSearchParams): Promise<boolean> {\n     try {\n       // Check for OAuth errors first\n       this.checkForOAuthError(params);\n \n"
                }
            ],
            "date": 1752830671933,
            "name": "Commit-0",
            "content": "/**\n * Magic Link Flow Handler\n */\n\nimport { BaseFlowHandler } from './FlowHandler';\nimport { OAuthConfig, OAuthAdapters, OAuthResult, OAUTH_ERROR_CODES } from '../types/OAuthTypes';\nimport { FLOW_PRIORITIES } from '../types/FlowTypes';\nimport { TokenManager } from '../core/TokenManager';\nimport { StateValidator } from '../core/StateValidator';\nimport { ErrorHandler } from '../utils/ErrorHandler';\nimport { UrlParser } from '../utils/UrlParser';\n\nexport class MagicLinkFlowHandler extends BaseFlowHandler {\n  readonly name = 'magic_link';\n  readonly priority = FLOW_PRIORITIES.HIGH; // Higher priority than standard OAuth\n\n  /**\n   * Check if this handler can process the given parameters\n   */\n  canHandle(params: URLSearchParams): boolean {\n    // Magic link flow requires either 'token' or 'magic_link_token' parameter\n    return params.has('token') || params.has('magic_link_token');\n  }\n\n  /**\n   * Validate the magic link flow parameters\n   */\n  async validate(params: URLSearchParams, config: OAuthConfig): Promise<boolean> {\n    try {\n      // Check for OAuth errors first\n      this.checkForOAuthError(params);\n\n      // Must have either token or magic_link_token\n      const hasToken = params.has('token') || params.has('magic_link_token');\n      if (!hasToken) {\n        return false;\n      }\n\n      // If state is present, validate it\n      const state = params.get('state');\n      if (state) {\n        const stateValidator = new StateValidator(config.adapters?.storage || {} as any);\n        const isValidState = await stateValidator.validateState(state);\n        if (!isValidState) {\n          return false;\n        }\n      }\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Handle the magic link flow\n   */\n  async handle(params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig): Promise<OAuthResult> {\n    this.logFlowExecution('Starting magic link flow', params);\n\n    return this.measureExecutionTime(async () => {\n      try {\n        // Check for OAuth errors\n        this.checkForOAuthError(params);\n\n        // Extract token (try both parameter names)\n        const token = this.extractToken(params);\n        const flow = this.getOptionalParam(params, 'flow');\n        const state = this.getOptionalParam(params, 'state');\n\n        // Validate state if present\n        if (state) {\n          await this.validateState(state, adapters);\n        }\n\n        // Build additional parameters for the token exchange\n        const additionalParams = this.buildAdditionalParams(params, flow);\n\n        // Exchange magic link token for OAuth tokens\n        const result = await this.exchangeMagicLinkToken(token, additionalParams, adapters, config);\n\n        this.logFlowExecution('Magic link flow completed successfully');\n        return result;\n\n      } catch (error) {\n        this.logFlowExecution(`Magic link flow failed: ${ErrorHandler.formatError(error)}`);\n        \n        if (ErrorHandler.isOAuthError(error)) {\n          throw error;\n        }\n\n        throw ErrorHandler.createError(\n          `Magic link flow failed: ${error instanceof Error ? error.message : String(error)}`,\n          'TOKEN_EXCHANGE_FAILED',\n          error instanceof Error ? error : undefined\n        );\n      }\n    }, 'Magic link token exchange');\n  }\n\n  /**\n   * Extract token from parameters (supports both 'token' and 'magic_link_token')\n   */\n  private extractToken(params: URLSearchParams): string {\n    const token = UrlParser.getFirstParam(params, ['token', 'magic_link_token']);\n    \n    if (!token) {\n      throw ErrorHandler.handleMissingParameter('token or magic_link_token');\n    }\n\n    return token;\n  }\n\n  /**\n   * Build additional parameters for token exchange\n   */\n  private buildAdditionalParams(params: URLSearchParams, flow?: string): Record<string, string> {\n    const additionalParams: Record<string, string> = {};\n\n    // Include flow type if specified\n    if (flow) {\n      additionalParams.flow = flow;\n    }\n\n    // Include any PKCE parameters that might be present\n    const codeChallenge = params.get('code_challenge');\n    const codeChallengeMethod = params.get('code_challenge_method');\n    const codeVerifier = params.get('code_verifier');\n    const state = params.get('state');\n\n    if (codeChallenge) {\n      additionalParams.code_challenge = codeChallenge;\n    }\n\n    if (codeChallengeMethod) {\n      additionalParams.code_challenge_method = codeChallengeMethod;\n    }\n\n    if (codeVerifier) {\n      additionalParams.code_verifier = codeVerifier;\n    }\n\n    if (state) {\n      additionalParams.state = state;\n    }\n\n    return additionalParams;\n  }\n\n  /**\n   * Validate state parameter\n   */\n  private async validateState(state: string, adapters: OAuthAdapters): Promise<void> {\n    const stateValidator = new StateValidator(adapters.storage);\n    await stateValidator.validateStateOrThrow(state);\n  }\n\n  /**\n   * Exchange magic link token for OAuth tokens\n   */\n  private async exchangeMagicLinkToken(\n    token: string,\n    additionalParams: Record<string, string>,\n    adapters: OAuthAdapters,\n    config: OAuthConfig\n  ): Promise<OAuthResult> {\n    const tokenManager = new TokenManager(adapters.http, adapters.storage);\n    return tokenManager.exchangeMagicLinkToken(token, config, additionalParams);\n  }\n}\n\n/**\n * Factory function to create magic link flow handler\n */\nexport function createMagicLinkFlowHandler(): MagicLinkFlowHandler {\n  return new MagicLinkFlowHandler();\n}\n\n/**\n * Specialized handlers for different magic link flows\n */\nexport class MagicLinkLoginFlowHandler extends MagicLinkFlowHandler {\n  readonly name = 'magic_link_login';\n\n  canHandle(params: URLSearchParams): boolean {\n    const hasToken = super.canHandle(params);\n    const flow = params.get('flow');\n    return hasToken && flow === 'login';\n  }\n}\n\nexport class MagicLinkRegistrationFlowHandler extends MagicLinkFlowHandler {\n  readonly name = 'magic_link_registration';\n\n  canHandle(params: URLSearchParams): boolean {\n    const hasToken = super.canHandle(params);\n    const flow = params.get('flow');\n    return hasToken && flow === 'registration';\n  }\n}\n\n/**\n * Factory functions for specialized handlers\n */\nexport function createMagicLinkLoginFlowHandler(): MagicLinkLoginFlowHandler {\n  return new MagicLinkLoginFlowHandler();\n}\n\nexport function createMagicLinkRegistrationFlowHandler(): MagicLinkRegistrationFlowHandler {\n  return new MagicLinkRegistrationFlowHandler();\n}\n"
        }
    ]
}