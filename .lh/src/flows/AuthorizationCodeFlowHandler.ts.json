{
    "sourceFile": "src/flows/AuthorizationCodeFlowHandler.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752827467967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752827538664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n  * OAuth2 Authorization Code Flow Handler\n  */\n \n import { BaseFlowHandler } from './FlowHandler';\n-import { OAuthConfig, OAuthAdapters, OAuthResult } from '../types/OAuthTypes';\n+import { OAuthConfig, OAuthAdapters, OAuthResult, OAUTH_ERROR_CODES } from '../types/OAuthTypes';\n import { FLOW_PRIORITIES } from '../types/FlowTypes';\n import { PKCEManager } from '../core/PKCEManager';\n import { TokenManager } from '../core/TokenManager';\n import { StateValidator } from '../core/StateValidator';\n"
                },
                {
                    "date": 1752827566037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n   /**\n    * Check if this handler can process the given parameters\n    */\n-  canHandle(params: URLSearchParams, config: OAuthConfig): boolean {\n+  canHandle(params: URLSearchParams, _config: OAuthConfig): boolean {\n     // Authorization code flow requires 'code' parameter\n     // and should NOT have magic link tokens\n     return (\n       params.has('code') &&\n"
                },
                {
                    "date": 1752827635042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n   /**\n    * Validate the authorization code flow parameters\n    */\n-  async validate(params: URLSearchParams, config: OAuthConfig): Promise<boolean> {\n+  override async validate(params: URLSearchParams, _config: OAuthConfig): Promise<boolean> {\n     try {\n       // Check for OAuth errors first\n       this.checkForOAuthError(params);\n \n"
                },
                {
                    "date": 1752827659895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,11 @@\n \n       // If state is present, validate it\n       const state = params.get('state');\n       if (state) {\n-        const stateValidator = new StateValidator(config.adapters?.storage || {} as any);\n-        const isValidState = await stateValidator.validateState(state);\n-        if (!isValidState) {\n-          return false;\n-        }\n+        // Note: In real usage, adapters would be passed from the handle method\n+        // For validation, we just check if state exists\n+        return true;\n       }\n \n       return true;\n     } catch {\n"
                },
                {
                    "date": 1752827676055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         }\n \n         throw ErrorHandler.createError(\n           `Authorization code flow failed: ${error instanceof Error ? error.message : String(error)}`,\n-          'TOKEN_EXCHANGE_FAILED',\n+          OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED,\n           error instanceof Error ? error : undefined\n         );\n       }\n     }, 'Authorization code exchange');\n"
                },
                {
                    "date": 1752827696504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \n     if (!codeVerifier) {\n       throw ErrorHandler.createError(\n         'PKCE code verifier not found in storage',\n-        'MISSING_PKCE'\n+        OAUTH_ERROR_CODES.MISSING_PKCE\n       );\n     }\n \n     return codeVerifier;\n"
                },
                {
                    "date": 1752834526554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n   /**\n    * Check if this handler can process the given parameters\n    */\n-  canHandle(params: URLSearchParams, _config: OAuthConfig): boolean {\n+  canHandle(params: URLSearchParams): boolean {\n     // Authorization code flow requires 'code' parameter\n     // and should NOT have magic link tokens\n     return (\n       params.has('code') &&\n"
                },
                {
                    "date": 1752834538301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n   /**\n    * Validate the authorization code flow parameters\n    */\n-  override async validate(params: URLSearchParams, _config: OAuthConfig): Promise<boolean> {\n+  override async validate(params: URLSearchParams): Promise<boolean> {\n     try {\n       // Check for OAuth errors first\n       this.checkForOAuthError(params);\n \n"
                }
            ],
            "date": 1752827467967,
            "name": "Commit-0",
            "content": "/**\n * OAuth2 Authorization Code Flow Handler\n */\n\nimport { BaseFlowHandler } from './FlowHandler';\nimport { OAuthConfig, OAuthAdapters, OAuthResult } from '../types/OAuthTypes';\nimport { FLOW_PRIORITIES } from '../types/FlowTypes';\nimport { PKCEManager } from '../core/PKCEManager';\nimport { TokenManager } from '../core/TokenManager';\nimport { StateValidator } from '../core/StateValidator';\nimport { ErrorHandler } from '../utils/ErrorHandler';\n\nexport class AuthorizationCodeFlowHandler extends BaseFlowHandler {\n  readonly name = 'authorization_code';\n  readonly priority = FLOW_PRIORITIES.NORMAL; // Standard OAuth flow\n\n  /**\n   * Check if this handler can process the given parameters\n   */\n  canHandle(params: URLSearchParams, config: OAuthConfig): boolean {\n    // Authorization code flow requires 'code' parameter\n    // and should NOT have magic link tokens\n    return (\n      params.has('code') &&\n      !params.has('token') &&\n      !params.has('magic_link_token')\n    );\n  }\n\n  /**\n   * Validate the authorization code flow parameters\n   */\n  async validate(params: URLSearchParams, config: OAuthConfig): Promise<boolean> {\n    try {\n      // Check for OAuth errors first\n      this.checkForOAuthError(params);\n\n      // Validate required parameters\n      this.validateRequiredParams(params, ['code']);\n\n      // If state is present, validate it\n      const state = params.get('state');\n      if (state) {\n        const stateValidator = new StateValidator(config.adapters?.storage || {} as any);\n        const isValidState = await stateValidator.validateState(state);\n        if (!isValidState) {\n          return false;\n        }\n      }\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Handle the authorization code flow\n   */\n  async handle(params: URLSearchParams, adapters: OAuthAdapters, config: OAuthConfig): Promise<OAuthResult> {\n    this.logFlowExecution('Starting authorization code flow', params);\n\n    return this.measureExecutionTime(async () => {\n      try {\n        // Check for OAuth errors\n        this.checkForOAuthError(params);\n\n        // Extract required parameters\n        const code = this.getRequiredParam(params, 'code');\n        const state = this.getOptionalParam(params, 'state');\n\n        // Validate state if present\n        if (state) {\n          await this.validateState(state, adapters);\n        }\n\n        // Get stored PKCE code verifier\n        const codeVerifier = await this.getCodeVerifier(adapters);\n\n        // Exchange authorization code for tokens\n        const result = await this.exchangeCodeForTokens(code, codeVerifier, adapters, config);\n\n        // Clean up stored PKCE data\n        await this.cleanupPKCEData(adapters);\n\n        this.logFlowExecution('Authorization code flow completed successfully');\n        return result;\n\n      } catch (error) {\n        this.logFlowExecution(`Authorization code flow failed: ${ErrorHandler.formatError(error)}`);\n        \n        if (ErrorHandler.isOAuthError(error)) {\n          throw error;\n        }\n\n        throw ErrorHandler.createError(\n          `Authorization code flow failed: ${error instanceof Error ? error.message : String(error)}`,\n          'TOKEN_EXCHANGE_FAILED',\n          error instanceof Error ? error : undefined\n        );\n      }\n    }, 'Authorization code exchange');\n  }\n\n  /**\n   * Validate state parameter\n   */\n  private async validateState(state: string, adapters: OAuthAdapters): Promise<void> {\n    const stateValidator = new StateValidator(adapters.storage);\n    await stateValidator.validateStateOrThrow(state);\n  }\n\n  /**\n   * Get stored PKCE code verifier\n   */\n  private async getCodeVerifier(adapters: OAuthAdapters): Promise<string> {\n    const pkceManager = new PKCEManager(adapters.pkce, adapters.storage);\n    const codeVerifier = await pkceManager.getCodeVerifier();\n\n    if (!codeVerifier) {\n      throw ErrorHandler.createError(\n        'PKCE code verifier not found in storage',\n        'MISSING_PKCE'\n      );\n    }\n\n    return codeVerifier;\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  private async exchangeCodeForTokens(\n    code: string,\n    codeVerifier: string,\n    adapters: OAuthAdapters,\n    config: OAuthConfig\n  ): Promise<OAuthResult> {\n    const tokenManager = new TokenManager(adapters.http, adapters.storage);\n    return tokenManager.exchangeAuthorizationCode(code, codeVerifier, config);\n  }\n\n  /**\n   * Clean up stored PKCE data after successful exchange\n   */\n  private async cleanupPKCEData(adapters: OAuthAdapters): Promise<void> {\n    try {\n      const pkceManager = new PKCEManager(adapters.pkce, adapters.storage);\n      await pkceManager.clearPKCEData();\n    } catch (error) {\n      // Log cleanup error but don't fail the flow\n      console.warn('Failed to cleanup PKCE data:', error);\n    }\n  }\n}\n\n/**\n * Factory function to create authorization code flow handler\n */\nexport function createAuthorizationCodeFlowHandler(): AuthorizationCodeFlowHandler {\n  return new AuthorizationCodeFlowHandler();\n}\n"
        }
    ]
}