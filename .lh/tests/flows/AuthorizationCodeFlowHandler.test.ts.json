{
    "sourceFile": "tests/flows/AuthorizationCodeFlowHandler.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752834666307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752834678831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       const params = new URLSearchParams({\n         token: 'test-magic-token',\n       });\n \n-      expect(handler.canHandle(params, mockConfig)).toBe(false);\n+      expect(handler.canHandle(params)).toBe(false);\n     });\n \n     it('should not handle parameters with both code and token', () => {\n       const params = new URLSearchParams({\n"
                },
                {
                    "date": 1752834696000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,17 +40,17 @@\n         code: 'test-auth-code',\n         token: 'test-magic-token',\n       });\n \n-      expect(handler.canHandle(params, mockConfig)).toBe(false);\n+      expect(handler.canHandle(params)).toBe(false);\n     });\n \n     it('should not handle parameters without code', () => {\n       const params = new URLSearchParams({\n         state: 'test-state',\n       });\n \n-      expect(handler.canHandle(params, mockConfig)).toBe(false);\n+      expect(handler.canHandle(params)).toBe(false);\n     });\n   });\n \n   describe('validate', () => {\n"
                },
                {
                    "date": 1752834711218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         code: 'test-auth-code',\n         state: 'test-state',\n       });\n \n-      const isValid = await handler.validate!(params, mockConfig);\n+      const isValid = await handler.validate!(params);\n       expect(isValid).toBe(true);\n     });\n \n     it('should reject parameters with OAuth error', async () => {\n"
                },
                {
                    "date": 1752834733488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,18 +75,18 @@\n         error: 'access_denied',\n         error_description: 'User denied access',\n       });\n \n-      const isValid = await handler.validate!(params, mockConfig);\n+      const isValid = await handler.validate!(params);\n       expect(isValid).toBe(false);\n     });\n \n     it('should reject parameters without required code', async () => {\n       const params = new URLSearchParams({\n         state: 'test-state',\n       });\n \n-      const isValid = await handler.validate!(params, mockConfig);\n+      const isValid = await handler.validate!(params);\n       expect(isValid).toBe(false);\n     });\n \n     it('should reject invalid state', async () => {\n@@ -94,18 +94,18 @@\n         code: 'test-auth-code',\n         state: 'invalid-state',\n       });\n \n-      const isValid = await handler.validate!(params, mockConfig);\n+      const isValid = await handler.validate!(params);\n       expect(isValid).toBe(false);\n     });\n \n     it('should validate parameters without state', async () => {\n       const params = new URLSearchParams({\n         code: 'test-auth-code',\n       });\n \n-      const isValid = await handler.validate!(params, mockConfig);\n+      const isValid = await handler.validate!(params);\n       expect(isValid).toBe(true);\n     });\n   });\n \n"
                }
            ],
            "date": 1752834666307,
            "name": "Commit-0",
            "content": "/**\n * Tests for AuthorizationCodeFlowHandler\n */\n\nimport { AuthorizationCodeFlowHandler } from '../../src/flows/AuthorizationCodeFlowHandler';\nimport { createMockAdapters, createMockConfig, MockHttpAdapter } from '../mocks/adapters';\nimport { OAuthError } from '../../src/types/OAuthTypes';\n\ndescribe('AuthorizationCodeFlowHandler', () => {\n  let handler: AuthorizationCodeFlowHandler;\n  let mockAdapters: ReturnType<typeof createMockAdapters>;\n  let mockConfig: ReturnType<typeof createMockConfig>;\n\n  beforeEach(() => {\n    handler = new AuthorizationCodeFlowHandler();\n    mockAdapters = createMockAdapters();\n    mockConfig = createMockConfig();\n  });\n\n  describe('canHandle', () => {\n    it('should handle authorization code flow parameters', () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n        state: 'test-state',\n      });\n\n      expect(handler.canHandle(params)).toBe(true);\n    });\n\n    it('should not handle magic link parameters', () => {\n      const params = new URLSearchParams({\n        token: 'test-magic-token',\n      });\n\n      expect(handler.canHandle(params, mockConfig)).toBe(false);\n    });\n\n    it('should not handle parameters with both code and token', () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n        token: 'test-magic-token',\n      });\n\n      expect(handler.canHandle(params, mockConfig)).toBe(false);\n    });\n\n    it('should not handle parameters without code', () => {\n      const params = new URLSearchParams({\n        state: 'test-state',\n      });\n\n      expect(handler.canHandle(params, mockConfig)).toBe(false);\n    });\n  });\n\n  describe('validate', () => {\n    beforeEach(async () => {\n      // Setup valid state in storage\n      await mockAdapters.storage.setItem('oauth_state', 'test-state');\n      await mockAdapters.storage.setItem('oauth_state_expiry', (Date.now() + 60000).toString());\n    });\n\n    it('should validate correct parameters', async () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n        state: 'test-state',\n      });\n\n      const isValid = await handler.validate!(params, mockConfig);\n      expect(isValid).toBe(true);\n    });\n\n    it('should reject parameters with OAuth error', async () => {\n      const params = new URLSearchParams({\n        error: 'access_denied',\n        error_description: 'User denied access',\n      });\n\n      const isValid = await handler.validate!(params, mockConfig);\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject parameters without required code', async () => {\n      const params = new URLSearchParams({\n        state: 'test-state',\n      });\n\n      const isValid = await handler.validate!(params, mockConfig);\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject invalid state', async () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n        state: 'invalid-state',\n      });\n\n      const isValid = await handler.validate!(params, mockConfig);\n      expect(isValid).toBe(false);\n    });\n\n    it('should validate parameters without state', async () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n      });\n\n      const isValid = await handler.validate!(params, mockConfig);\n      expect(isValid).toBe(true);\n    });\n  });\n\n  describe('handle', () => {\n    beforeEach(async () => {\n      // Setup PKCE data\n      await mockAdapters.storage.setItem('pkce_code_verifier', 'test-code-verifier');\n      await mockAdapters.storage.setItem('oauth_state', 'test-state');\n      await mockAdapters.storage.setItem('oauth_state_expiry', (Date.now() + 60000).toString());\n\n      // Mock successful token response\n      (mockAdapters.http as MockHttpAdapter).mockResponse(mockConfig.endpoints.token, {\n        status: 200,\n        data: {\n          access_token: 'test-access-token',\n          refresh_token: 'test-refresh-token',\n          expires_in: 3600,\n          token_type: 'Bearer',\n        },\n        headers: {},\n      });\n    });\n\n    it('should successfully handle authorization code flow', async () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n        state: 'test-state',\n      });\n\n      const result = await handler.handle(params, mockAdapters, mockConfig);\n\n      expect(result.success).toBe(true);\n      expect(result.accessToken).toBe('test-access-token');\n      expect(result.refreshToken).toBe('test-refresh-token');\n      expect(result.expiresIn).toBe(3600);\n    });\n\n    it('should handle flow without state parameter', async () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n      });\n\n      const result = await handler.handle(params, mockAdapters, mockConfig);\n\n      expect(result.success).toBe(true);\n      expect(result.accessToken).toBe('test-access-token');\n    });\n\n    it('should throw error for OAuth error parameters', async () => {\n      const params = new URLSearchParams({\n        error: 'access_denied',\n        error_description: 'User denied access',\n      });\n\n      await expect(handler.handle(params, mockAdapters, mockConfig)).rejects.toThrow(OAuthError);\n    });\n\n    it('should throw error for missing code parameter', async () => {\n      const params = new URLSearchParams({\n        state: 'test-state',\n      });\n\n      await expect(handler.handle(params, mockAdapters, mockConfig)).rejects.toThrow(OAuthError);\n    });\n\n    it('should throw error for invalid state', async () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n        state: 'invalid-state',\n      });\n\n      await expect(handler.handle(params, mockAdapters, mockConfig)).rejects.toThrow(OAuthError);\n    });\n\n    it('should throw error when PKCE code verifier is missing', async () => {\n      await mockAdapters.storage.removeItem('pkce_code_verifier');\n\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n      });\n\n      await expect(handler.handle(params, mockAdapters, mockConfig)).rejects.toThrow(OAuthError);\n    });\n\n    it('should throw error for token exchange failure', async () => {\n      (mockAdapters.http as MockHttpAdapter).mockResponse(mockConfig.endpoints.token, {\n        status: 400,\n        data: {\n          error: 'invalid_grant',\n          error_description: 'Invalid authorization code',\n        },\n        headers: {},\n      });\n\n      const params = new URLSearchParams({\n        code: 'invalid-auth-code',\n      });\n\n      await expect(handler.handle(params, mockAdapters, mockConfig)).rejects.toThrow(OAuthError);\n    });\n\n    it('should clean up PKCE data after successful exchange', async () => {\n      const params = new URLSearchParams({\n        code: 'test-auth-code',\n      });\n\n      await handler.handle(params, mockAdapters, mockConfig);\n\n      // Verify PKCE data is cleared\n      expect(await mockAdapters.storage.getItem('pkce_code_verifier')).toBeNull();\n    });\n  });\n\n  describe('properties', () => {\n    it('should have correct name and priority', () => {\n      expect(handler.name).toBe('authorization_code');\n      expect(handler.priority).toBe(50); // FLOW_PRIORITIES.NORMAL\n    });\n  });\n});\n"
        }
    ]
}